package com.unsolvablesolutions.eavesdrop;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import android.app.Activity;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

public class Send extends Activity
{
    private Button startButton,stopButton;

    public byte[] buffer;
    public static DatagramSocket socket;
    private final static int port = 4545;
    AudioRecord recorder;

    private int sampleRate = 44100;
    private int channelConfig = AudioFormat.CHANNEL_IN_MONO ;
    private int audioFormat = AudioFormat.ENCODING_PCM_16BIT;
    private int minBufSize = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);;
    private boolean status = true;

    private Socket socketTCP;
    private static final int serverPort = 8080;
    private static final String server_IP = "192.168.1.101";

    private MediaRecorder mRecorder = null;
    private static final String LOG_TAG = "AudioRecordTest";
    private static String mFileName = null;


    public Send()
    {
        mFileName = Environment.getExternalStorageDirectory().getAbsolutePath();
        mFileName += "/audiorecordtest.3gp";
    }

    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        startButton = (Button) findViewById (R.id.start_button);
        stopButton = (Button) findViewById (R.id.stop_button);

        stopButton.setEnabled(false);

        startButton.setOnClickListener (startListener);
        stopButton.setOnClickListener (stopListener);

        System.out.println("minBufSize: " + minBufSize);

        new Thread(new clientThread()).start();
    }

    private final OnClickListener stopListener = new OnClickListener()
    {

        @Override
        public void onClick(View arg0)
        {
            status = false;
            stopButton.setEnabled(false);
            startButton.setEnabled(true);
            recorder.release();
//            stopRecording();

            Log.d("VS", "Recorder released");
        }

    };

    private final OnClickListener startListener = new OnClickListener()
    {

        @Override
        public void onClick(View arg0)
        {
            status = true;
            startButton.setEnabled(false);
            stopButton.setEnabled(true);
            minBufSize = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioFormat);
            startStreaming();
            startLocalRecording();
        }

    };

    private void startRecording() {

    }

    private void stopRecording() {
        mRecorder.stop();
        mRecorder.release();
        mRecorder = null;
    }


    public void startLocalRecording()
    {
        Thread recordThread = new Thread(new Runnable() {
            @Override
            public void run() {

                mRecorder = new MediaRecorder();
                mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
                mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
                mRecorder.setOutputFile(mFileName);
                mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);

                try {
                    mRecorder.prepare();
                } catch (IOException e) {
                    Log.e(LOG_TAG, "prepare() failed");
                }

                mRecorder.start();

            }
        });

        //recordThread.start();
    }

    public void startStreaming()
    {
        Thread streamThread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {

                    DatagramSocket socket = new DatagramSocket();
                    Log.d("VS", "Socket Created");

                    byte[] buffer = new byte[minBufSize];

                    Log.d("VS","Buffer created of size " + minBufSize);
                    DatagramPacket packet;

                    final InetAddress destination = InetAddress.getByName(server_IP);
                    Log.d("VS", "Address retrieved");

                    recorder = new AudioRecord(MediaRecorder.AudioSource.MIC, sampleRate, channelConfig, audioFormat, minBufSize * 10);
                    Log.d("VS", "Recorder initialized");

                    recorder.startRecording();

                    while(status == true)
                    {
                        //reading data from MIC into buffer
                        minBufSize = recorder.read(buffer, 0, buffer.length);

                        //putting buffer in the packet
                        packet = new DatagramPacket (buffer,buffer.length,destination,port);

                        socket.send(packet);
                        System.out.println("MinBufferSize: " +minBufSize);
                    }
                }
                catch(UnknownHostException e)
                {
                    Log.e("VS", "UnknownHostException");
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                    Log.e("VS", "IOException");
                }
            }

        });
        streamThread.start();
    }

    class clientThread implements Runnable
    {
        @Override
        public void run()
        {
            try
            {
                InetAddress serverAddress = InetAddress.getByName(server_IP);
                socketTCP = new Socket(serverAddress, serverPort);
                Log.d("VS", "serverSocket Created");

                BufferedReader clientIn = new BufferedReader(new InputStreamReader(socketTCP.getInputStream()));
                String read = clientIn.readLine();
                System.out.println("Command: " + read);

                if(read.equals("start"))
                {
                    status = true;
                    startStreaming();
                }
            }
            catch(UnknownHostException e)
            {
                Log.e("VS", "UnknownHostException");
            }
            catch (IOException e)
            {
                e.printStackTrace();
                Log.e("VS", "IOException");
            }
        }
    }
}
